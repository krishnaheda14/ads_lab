-----------------------------------------------------------------------------------
UNIX COMMANDS
-----------------------------------------------------------------------------------

General Purpose Commands

1. date: To display current date & time of the system.
2. cal :To display calendar of current month.
3. who:List who is currently logged on to the system.
4. Whoami:Report what user you are logged on as.
5. echo :Echo a string (or list of arguments) to the terminal
6. bc:To perform mathematical operations
7. clear:To clear the screen
8. alias : Used to tailor commands
9. man <cmd name>: To get help for any command
10. passwd: To change the passward
11. exit: To logout from the terminal


File & Directory Related Commands

1. cp <fromfile> <tofile>: Copy from the <fromfile> to the <tofile>
2. mv <fromfile> <tofile> : Move/rename the <fromfile> to the <tofile>
3. rm <file>:Remove the file named <file>
4. mkdir <newdir>:Make a new directory called <newdir>
5. rmdir <dir>:Remove an (empty) directory
6. cd <dir> :Change the current working directory to dir
7. pwd : Print (display) the working directory
8. cat > <file> :To create new file n save it by pressing ^d
9. cat >> <file>: To append contents into file
10. cat <file>:To see the contents of existing file
11. more <file>:Paging out the contents of file
12. file <file>:To check the type of file
13. wc <file>:To count lines,words,charaters of file
14. cmp <file1> <file2>:To compate two files
15. comm <file1> <file2>:To display common values between two files
16. diff <file1> <file2>:To convert one file to another
17. gzip <file>:To compress the file
18. gunzip <file>:To unzip the contents of
19. ls :List the files in the current working directory
20. ls <dir>:List all files & directories in given directory
21. ln <fromfile><tofile>: Creates a symbolic link to a file

Simple Filters

1. pr <file> :Paginating the file
Ex pr –h “test” –d –n fname
2. head <file>:Display first 10 lines of file
Ex head –n -3 fname
3. tail <file> :To display last 10 lines of file
Ex tail -3 fname ; tail –c 100 fname
4. cut <file> :Splitting file vertically
Ex cut –c 2-10,12-14 fname
a. cut –d “|” –f 2,4 fname
5. paste <file1> <file2> :To combine two file vertically rather than horizontally
Ex paste –d “|” fname1 fname2
6. sort <file>:To sort file in order by field wise
Ex sort –t”|” –k 2 fname
a. sort –r fname
7. uniq <file> :Locate repeated & nonrepeated
lines Ex uniq fname; uniq –d fname
8. tr ch1 ch2 < <file1>:To translate occurrence of ch1 by ch2
Ex tr ‘|’ ‘+’ < fname1
9. tee: read from standard input and write to standard output and files
Ex. ls *.txt | wc -l | tee count.txt
File permission: Use the chmod command to change file permissions


Changing permission relative manner

Category Operation Perm.
u-user + assign r-read
g-group - removal w-write
o-other = assign abs perm. x-execute
a-all
Syntax: chmod category operation perm. <file>
Ex chmod u+x fname
chmod a+x fname
chmod u-x fname
chmod a-x,go+r fname

There are 3 types of redirection available in linux
1. Standard input redirection: It is used to redirect standard
input. Ex. cat < fname
2. Standard output redirection : It is used to redirect standard
output. Ex cat >fname
3. Standard error redirection: It is used to redirect standard
error. Ex cat fname 2>Errorfile

Pipe
Connects commands so the output of one becomes input for the second
Vertical bar(|) is the pipe operator.
Ex. ls -l | more
cat file1 file2 | sort > file3


-----------------------------------------------------------------------------------
READER WRITER PROBLEM
-----------------------------------------------------------------------------------

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

sem_t mutex, writeBlock; 
int data = 0, readersCount = 0;

void *reader(void *arg) {
    int readerId = *(int*)arg;
    while (1) {
        sem_wait(&mutex);
        readersCount++;
        if (readersCount == 1) {   
            sem_wait(&writeBlock);
        }
        sem_post(&mutex);

        printf("Reader %d reads data: %d\n", readerId, data);

        sem_wait(&mutex);
        readersCount--;
        if (readersCount == 0) {
            sem_post(&writeBlock);
        }
        sem_post(&mutex);
    }
}

void *writer(void *arg) {
    int writerId = *(int*)arg;
    while (1) {
        sem_wait(&writeBlock);
        
        data++;
        printf("Writer %d writes data: %d\n", writerId, data);

        sem_post(&writeBlock);
    }
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    sem_init(&mutex, 0, 1);
    sem_init(&writeBlock, 0, 1);

    int readerIds[NUM_READERS], writerIds[NUM_WRITERS];

    for (int i = 0; i < NUM_READERS; i++) {
        readerIds[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &readerIds[i]);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        writerIds[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writerIds[i]);
    }

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&writeBlock);

    return 0;
}

-----------------------------------------------------------------------------------
CPU SCHEDULING ALGORITHM
-----------------------------------------------------------------------------------

-----------------------------------------------------------------------------------
First Come First Serve :
-----------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int arrivaltime;
    int bursttime;
    int completiontime;
    int turnaroundtime;
    int waitingtime;
    int completed;
};

void fcfs(struct Process processes[], int n) {
    int currenttime = 0;
    for (int i = 0; i < n; i++) {
        struct Process *currentProc = &processes[i];
        for (int j = 0; j < n; j++) {
            if (processes[j].arrivaltime <= currenttime && !processes[j].completed && currentProc->arrivaltime > processes[j].arrivaltime) {
                currentProc = &processes[j];
            }
        }
        if (currenttime < currentProc->arrivaltime)
            currenttime = currentProc->arrivaltime;

        currenttime += currentProc->bursttime;
        currentProc->completiontime = currenttime;
        currentProc->turnaroundtime = currenttime - currentProc->arrivaltime;
        currentProc->waitingtime = currentProc->turnaroundtime - currentProc->bursttime;
        currentProc->completed = 1;

        printf("Process id: %d\n", currentProc->id);
        printf("Process arr: %d\n", currentProc->arrivaltime);
        printf("Process burst: %d\n", currentProc->bursttime);
        printf("Process completion: %d\n", currentProc->completiontime);
        printf("Process turnaround: %d\n", currentProc->turnaroundtime);
        printf("Process waiting: %d\n\n", currentProc->waitingtime);
    }
}

int main() {
    int n;
    float AverageWT = 0;
    float AverageTAT = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process *)malloc(n * sizeof(struct Process));

    printf("Enter arrival times and burst times for each process:\n");
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &processes[i].arrivaltime);
        printf("Process %d Burst Time: ", i + 1);
        scanf("%d", &processes[i].bursttime);
        processes[i].completed = 0;
    }
    // Perform FCFS scheduling
    fcfs(processes, n);

    // Display the scheduling results
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        AverageWT += processes[i].waitingtime;
        AverageTAT += processes[i].turnaroundtime;

        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrivaltime, processes[i].bursttime,
               processes[i].completiontime, processes[i].turnaroundtime, processes[i].waitingtime);
    }

    printf("\nAverage Waiting Time is %f\n", AverageWT / n);
    printf("Average Turnaround Time is %f\n", AverageTAT / n);

    free(processes);
    return 0;
}

-----------------------------------------------------------------------------------
Shortest Job First :
-----------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int arrivaltime;
    int bursttime;
    int completiontime;
    int turnaroundtime;
    int waitingtime;
    int completed;
};

void fcfs(struct Process processes[], int n) {
    int currenttime = 0;
    for (int i = 0; i < n; i++) {
        struct Process *currentProc = &processes[i];
        for (int j = 0; j < n; j++) {
            if (processes[j].arrivaltime <= currenttime && !processes[j].completed && currentProc->arrivaltime > processes[j].arrivaltime) {
                currentProc = &processes[j];
            }
        }
        if (currenttime < currentProc->arrivaltime)
            currenttime = currentProc->arrivaltime;

        currenttime += currentProc->bursttime;
        currentProc->completiontime = currenttime;
        currentProc->turnaroundtime = currenttime - currentProc->arrivaltime;
        currentProc->waitingtime = currentProc->turnaroundtime - currentProc->bursttime;
        currentProc->completed = 1;

        printf("Process id: %d\n", currentProc->id);
        printf("Process arr: %d\n", currentProc->arrivaltime);
        printf("Process burst: %d\n", currentProc->bursttime);
        printf("Process completion: %d\n", currentProc->completiontime);
        printf("Process turnaround: %d\n", currentProc->turnaroundtime);
        printf("Process waiting: %d\n\n", currentProc->waitingtime);
    }
}

int main() {
    int n;
    float AverageWT = 0;
    float AverageTAT = 0;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process *)malloc(n * sizeof(struct Process));

    printf("Enter arrival times and burst times for each process:\n");
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &processes[i].arrivaltime);
        printf("Process %d Burst Time: ", i + 1);
        scanf("%d", &processes[i].bursttime);
        processes[i].completed = 0;
    }
    // Perform FCFS scheduling
    fcfs(processes, n);

    // Display the scheduling results
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        AverageWT += processes[i].waitingtime;
        AverageTAT += processes[i].turnaroundtime;

        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrivaltime, processes[i].bursttime,
               processes[i].completiontime, processes[i].turnaroundtime, processes[i].waitingtime);
    }

    printf("\nAverage Waiting Time is %f\n", AverageWT / n);
    printf("Average Turnaround Time is %f\n", AverageTAT / n);

    free(processes);
    return 0;
}

-----------------------------------------------------------------------------------
Priority (Non Pre-emptive):
-----------------------------------------------------------------------------------

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

struct Process {
    int id;
    int priority;
    int arrival;
    int burst;
    int completion;
    int waiting;
    int turnaround;
    int response;
    bool completed;
};

void priority_np(struct Process processes[], int n) {
    int currenttime = 0;
    int completed_processes = 0;
    int max_priority;
    struct Process *currproc = NULL;

    while (completed_processes < n) {
        max_priority = INT32_MAX;
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && max_priority > processes[i].priority && processes[i].arrival <= currenttime) {
                max_priority = processes[i].priority;
                currproc = &processes[i];
            }
        }

        if (currproc == NULL) {
            currenttime++;
        } else {
            if (currproc->response == -1)
                currproc->response = currenttime;

            currenttime += currproc->burst;
            currproc->completion = currenttime;
            currproc->turnaround = currenttime - currproc->arrival;
            currproc->waiting = currproc->turnaround - currproc->burst;
            currproc->completed = true;
            completed_processes++;
        }
    }

    printf("Id\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].arrival, processes[i].burst, processes[i].completion,
               processes[i].turnaround, processes[i].waiting);
    }
}

int main() {
    int n;
    printf("Number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    int arr, burst, priority;
    for (int i = 0; i < n; i++) {
        printf("Enter arrival, burst, and priority for process %d: ", i);
        scanf("%d %d %d", &arr, &burst, &priority);
        processes[i].id = i;
        processes[i].arrival = arr;
        processes[i].burst = burst;
        processes[i].priority = priority;
        processes[i].completion = 0;
        processes[i].waiting = 0;
        processes[i].turnaround = 0;
        processes[i].response = -1;
        processes[i].completed = false;
    }

    priority_np(processes, n);
}

-----------------------------------------------------------------------------------
Priority (Pre-emptive):
-----------------------------------------------------------------------------------
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

struct Process {
    int id, priority, at, bt, ct, wt, tat, rt, remaining;
    bool completed;
};

void priority_premp(struct Process processes[], int n) {
    int currentTime = INT32_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].at < currentTime) {
            currentTime = processes[i].at;
        }
    }

    int completedProcesses = 0;
    struct Process *currentProcess;
    int maxPriority = INT32_MAX;

    while (completedProcesses < n) {
        currentProcess = NULL; 
        maxPriority = INT32_MAX;

        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].at <= currentTime && maxPriority >= processes[i].priority) {
                maxPriority = processes[i].priority;
                currentProcess = &processes[i];
            }
        }

        if (currentProcess ==  NULL) {
            currentTime++;
        } else {
            printf("P%d\n",currentProcess->id);
            if (currentProcess->rt == -1) {
                currentProcess->rt == currentTime - currentProcess->at; 
            }

            currentTime++; 

            if (currentProcess->remaining > 0) {
                currentProcess->remaining--;

                if (currentProcess->remaining == 0) {
                    currentProcess->ct = currentTime;
                    currentProcess->tat = currentTime - currentProcess->at;
                    currentProcess->wt = currentProcess->tat - currentProcess->bt;
                    currentProcess->completed = true;
                    completedProcesses++;
                }
            }
        }
    }

    printf("Id\tAT\tBT\tCT\tTAT\tWT\n");
    for(int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].at, processes[i].bt, processes[i].ct, processes[i].tat, processes[i].wt);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    int arrival, burst, priority;

    for (int i = 0; i < n; i++) {
        printf("Enter the Priority, Arrival Time and Burst Time for Process %d: ", i + 1);
        scanf("%d %d %d", &priority, &arrival, &burst);
        processes[i].id = i;
        processes[i].priority = priority;
        processes[i].at = arrival;
        processes[i].bt = burst;
        processes[i].ct = 0;
        processes[i].wt = 0;
        processes[i].tat = 0;
        processes[i].rt = -1;
        processes[i].remaining = burst;
        processes[i].completed = false;
    }

    priority_premp(processes, n);

    return 0;
}
